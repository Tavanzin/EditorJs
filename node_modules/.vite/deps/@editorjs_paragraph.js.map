{
  "version": 3,
  "sources": ["../../@editorjs/paragraph/dist/paragraph.mjs"],
  "sourcesContent": ["(function(){\"use strict\";try{if(typeof document<\"u\"){var e=document.createElement(\"style\");e.appendChild(document.createTextNode(\".ce-paragraph{line-height:1.6em;outline:none}.ce-block:only-of-type .ce-paragraph[data-placeholder-active]:empty:before,.ce-block:only-of-type .ce-paragraph[data-placeholder-active][data-empty=true]:before{content:attr(data-placeholder-active)}.ce-paragraph p:first-of-type{margin-top:0}.ce-paragraph p:last-of-type{margin-bottom:0}\")),document.head.appendChild(e)}}catch(a){console.error(\"vite-plugin-css-injected-by-js\",a)}})();\r\nconst a = '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" fill=\"none\" viewBox=\"0 0 24 24\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-width=\"2\" d=\"M8 9V7.2C8 7.08954 8.08954 7 8.2 7L12 7M16 9V7.2C16 7.08954 15.9105 7 15.8 7L12 7M12 7L12 17M12 17H10M12 17H14\"/></svg>';\r\nfunction l(r) {\r\n  const t = document.createElement(\"div\");\r\n  t.innerHTML = r.trim();\r\n  const e = document.createDocumentFragment();\r\n  return e.append(...Array.from(t.childNodes)), e;\r\n}\r\n/**\r\n * Base Paragraph Block for the Editor.js.\r\n * Represents a regular text block\r\n *\r\n * @author CodeX (team@codex.so)\r\n * @copyright CodeX 2018\r\n * @license The MIT License (MIT)\r\n */\r\nclass n {\r\n  /**\r\n   * Default placeholder for Paragraph Tool\r\n   *\r\n   * @returns {string}\r\n   * @class\r\n   */\r\n  static get DEFAULT_PLACEHOLDER() {\r\n    return \"\";\r\n  }\r\n  /**\r\n   * Render plugin`s main Element and fill it with saved data\r\n   *\r\n   * @param {object} params - constructor params\r\n   * @param {ParagraphData} params.data - previously saved data\r\n   * @param {ParagraphConfig} params.config - user config for Tool\r\n   * @param {object} params.api - editor.js api\r\n   * @param {boolean} readOnly - read only mode flag\r\n   */\r\n  constructor({ data: t, config: e, api: i, readOnly: s }) {\r\n    this.api = i, this.readOnly = s, this._CSS = {\r\n      block: this.api.styles.block,\r\n      wrapper: \"ce-paragraph\"\r\n    }, this.readOnly || (this.onKeyUp = this.onKeyUp.bind(this)), this._placeholder = e.placeholder ? e.placeholder : n.DEFAULT_PLACEHOLDER, this._data = t ?? {}, this._element = null, this._preserveBlank = e.preserveBlank ?? !1;\r\n  }\r\n  /**\r\n   * Check if text content is empty and set empty string to inner html.\r\n   * We need this because some browsers (e.g. Safari) insert <br> into empty contenteditanle elements\r\n   *\r\n   * @param {KeyboardEvent} e - key up event\r\n   */\r\n  onKeyUp(t) {\r\n    if (t.code !== \"Backspace\" && t.code !== \"Delete\" || !this._element)\r\n      return;\r\n    const { textContent: e } = this._element;\r\n    e === \"\" && (this._element.innerHTML = \"\");\r\n  }\r\n  /**\r\n   * Create Tool's view\r\n   *\r\n   * @returns {HTMLDivElement}\r\n   * @private\r\n   */\r\n  drawView() {\r\n    const t = document.createElement(\"DIV\");\r\n    return t.classList.add(this._CSS.wrapper, this._CSS.block), t.contentEditable = \"false\", t.dataset.placeholderActive = this.api.i18n.t(this._placeholder), this._data.text && (t.innerHTML = this._data.text), this.readOnly || (t.contentEditable = \"true\", t.addEventListener(\"keyup\", this.onKeyUp)), t;\r\n  }\r\n  /**\r\n   * Return Tool's view\r\n   *\r\n   * @returns {HTMLDivElement}\r\n   */\r\n  render() {\r\n    return this._element = this.drawView(), this._element;\r\n  }\r\n  /**\r\n   * Method that specified how to merge two Text blocks.\r\n   * Called by Editor.js by backspace at the beginning of the Block\r\n   *\r\n   * @param {ParagraphData} data\r\n   * @public\r\n   */\r\n  merge(t) {\r\n    if (!this._element)\r\n      return;\r\n    this._data.text += t.text;\r\n    const e = l(t.text);\r\n    this._element.appendChild(e), this._element.normalize();\r\n  }\r\n  /**\r\n   * Validate Paragraph block data:\r\n   * - check for emptiness\r\n   *\r\n   * @param {ParagraphData} savedData â€” data received after saving\r\n   * @returns {boolean} false if saved data is not correct, otherwise true\r\n   * @public\r\n   */\r\n  validate(t) {\r\n    return !(t.text.trim() === \"\" && !this._preserveBlank);\r\n  }\r\n  /**\r\n   * Extract Tool's data from the view\r\n   *\r\n   * @param {HTMLDivElement} toolsContent - Paragraph tools rendered view\r\n   * @returns {ParagraphData} - saved data\r\n   * @public\r\n   */\r\n  save(t) {\r\n    return {\r\n      text: t.innerHTML\r\n    };\r\n  }\r\n  /**\r\n   * On paste callback fired from Editor.\r\n   *\r\n   * @param {HTMLPasteEvent} event - event with pasted data\r\n   */\r\n  onPaste(t) {\r\n    const e = {\r\n      text: t.detail.data.innerHTML\r\n    };\r\n    this._data = e, window.requestAnimationFrame(() => {\r\n      this._element && (this._element.innerHTML = this._data.text || \"\");\r\n    });\r\n  }\r\n  /**\r\n   * Enable Conversion Toolbar. Paragraph can be converted to/from other tools\r\n   * @returns {ConversionConfig}\r\n   */\r\n  static get conversionConfig() {\r\n    return {\r\n      export: \"text\",\r\n      // to convert Paragraph to other block, use 'text' property of saved data\r\n      import: \"text\"\r\n      // to covert other block's exported string to Paragraph, fill 'text' property of tool data\r\n    };\r\n  }\r\n  /**\r\n   * Sanitizer rules\r\n   * @returns {SanitizerConfig} - Edtior.js sanitizer config\r\n   */\r\n  static get sanitize() {\r\n    return {\r\n      text: {\r\n        br: !0\r\n      }\r\n    };\r\n  }\r\n  /**\r\n   * Returns true to notify the core that read-only mode is supported\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  static get isReadOnlySupported() {\r\n    return !0;\r\n  }\r\n  /**\r\n   * Used by Editor paste handling API.\r\n   * Provides configuration to handle P tags.\r\n   *\r\n   * @returns {PasteConfig} - Paragraph Paste Setting\r\n   */\r\n  static get pasteConfig() {\r\n    return {\r\n      tags: [\"P\"]\r\n    };\r\n  }\r\n  /**\r\n   * Icon and title for displaying at the Toolbox\r\n   *\r\n   * @returns {ToolboxConfig} - Paragraph Toolbox Setting\r\n   */\r\n  static get toolbox() {\r\n    return {\r\n      icon: a,\r\n      title: \"Text\"\r\n    };\r\n  }\r\n}\r\nexport {\r\n  n as default\r\n};\r\n"],
  "mappings": "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",
  "names": ["a"]
}
